"use client";
import React, { useState, useEffect } from "react";
import { useAuth } from "@/context/authContext"; // Import context ƒë·ªÉ l·∫•y token v√† user

// Helper function to format date for input type="date"
const formatDateForInput = (dateString) => {
  if (!dateString) return "";
  try {
    const date = new Date(dateString);
    // Check if date is valid before formatting
    if (isNaN(date.getTime())) {
      return "";
    }
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, "0"); // Months are 0-indexed
    const day = date.getDate().toString().padStart(2, "0");
    return `${year}-${month}-${day}`;
  } catch (error) {
    console.error("Error formatting date:", error);
    return "";
  }
};

const ProfilePage = () => {
  const { token, user: authUser } = useAuth(); // L·∫•y token v√† user ban ƒë·∫ßu t·ª´ context
  const [candidateData, setCandidateData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false); // State ri√™ng cho l√∫c update
  const [updateError, setUpdateError] = useState(null);
  // State ƒë·ªÉ l∆∞u d·ªØ li·ªáu form khi ƒëang ch·ªânh s·ª≠a
  const [formData, setFormData] = useState({
    fullName: "",
    phone: "",
    gender: "",
    dateOfBirth: "",
    address: "",
    // Th√™m c√°c tr∆∞·ªùng kh√°c n·∫øu c·∫ßn ch·ªânh s·ª≠a
  });

  // Fetch th√¥ng tin c√° nh√¢n khi component mount ho·∫∑c token thay ƒë·ªïi
  useEffect(() => {
    const fetchMyInfo = async () => {
      if (!token) {
        setError("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin.");
        setIsLoading(false);
        return;
      }
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch(
          "http://localhost:8000/api/candidates/me",
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );
        const data = await response.json();
        if (!response.ok) {
          throw new Error(
            data.message || "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng."
          );
        }
        setCandidateData(data.data);
      } catch (err) {
        setError(err.message);
        setCandidateData(null); // ƒê·∫£m b·∫£o kh√¥ng hi·ªÉn th·ªã data c≈© n·∫øu l·ªói
      } finally {
        setIsLoading(false);
      }
    };

    fetchMyInfo();
  }, [token]); // Ch·∫°y l·∫°i khi token thay ƒë·ªïi (v√≠ d·ª•: sau khi ƒëƒÉng nh·∫≠p)

  // --- X·ª≠ l√Ω Ch·ªânh s·ª≠a ---
  const handleEditClick = () => {
    if (!candidateData) return;
    setFormData({
      fullName: candidateData.fullName || "",
      phone: candidateData.phone || "",
      gender: candidateData.gender || "",
      dateOfBirth: formatDateForInput(candidateData.dateOfBirth) || "",
      address: candidateData.address || "",
    });
    setIsEditing(true);
    setUpdateError(null); // X√≥a l·ªói c≈© khi b·∫Øt ƒë·∫ßu edit
  };

  const handleCancelEdit = () => {
    setIsEditing(false);
    setUpdateError(null);
    // Kh√¥ng c·∫ßn reset formData v√¨ l·∫ßn sau edit s·∫Ω l·∫•y t·ª´ candidateData
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleUpdateProfile = async (e) => {
    e.preventDefault(); // NgƒÉn form submit m·∫∑c ƒë·ªãnh
    if (!token) {
      setUpdateError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      return;
    }
    setIsUpdating(true);
    setUpdateError(null);

    // Chu·∫©n b·ªã data g·ª≠i ƒëi (ch·ªâ g·ª≠i nh·ªØng tr∆∞·ªùng c√≥ trong formData)
    const updateData = { ...formData };
    // X√≥a c√°c tr∆∞·ªùng r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá n·∫øu c·∫ßn, v√≠ d·ª•:
    if (!updateData.phone) delete updateData.phone;
    if (!updateData.gender) delete updateData.gender;
    if (!updateData.dateOfBirth) delete updateData.dateOfBirth;
    if (!updateData.address) delete updateData.address;

    try {
      const response = await fetch("http://localhost:8000/api/candidates/me", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(updateData),
      });

      const result = await response.json();

      if (!response.ok) {
        // X·ª≠ l√Ω l·ªói validation t·ª´ server
        if (result.errors && Array.isArray(result.errors)) {
          const formattedErrors = result.errors
            .map((err) => `${err.field}: ${err.message}`)
            .join("\n");
          throw new Error(
            formattedErrors || result.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i."
          );
        }
        throw new Error(result.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i.");
      }

      // C·∫≠p nh·∫≠t th√†nh c√¥ng
      setCandidateData(result.data); // C·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu m·ªõi t·ª´ server
      setIsEditing(false); // Tho√°t ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
    } catch (err) {
      console.error("Update failed:", err);
      setUpdateError(err.message || "ƒê√£ c√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t.");
    } finally {
      setIsUpdating(false);
    }
  };

  // --- Sidebar Menu (gi·ªØ nguy√™n) ---
  const menuItems = [
    { icon: "üë§", label: "H·ªì s∆° c·ªßa t√¥i", active: true },
    { icon: "‚ú®", label: "Trang tr√≠ CV" },
    { icon: "üíº", label: "Qu·∫£n l√Ω vi·ªác l√†m", hasSubMenu: true },
    { icon: "‚≠ê", label: "NTD b·∫°n quan t√¢m", hasSubMenu: true },
    { icon: "üîî", label: "H·ªó tr·ª£ v√† th√¥ng b√°o", hasSubMenu: true },
    { icon: "‚öôÔ∏è", label: "Qu·∫£n l√Ω t√†i kho·∫£n" },
  ];

  // --- Render Loading ho·∫∑c Error ---
  if (isLoading) {
    return <div className="text-center py-10">ƒêang t·∫£i th√¥ng tin...</div>;
  }

  if (error) {
    return <div className="text-center py-10 text-red-600">L·ªói: {error}</div>;
  }

  // --- Render Profile ---
  return (
    <div className="relative flex w-full max-w-[1366px] gap-6 sm_cv:w-full bg-[#FAFAFF] content-center mx-auto py-8 sm_cv:pt-6 px-[16px] sm_cv:px-0">
      {/* Sidebar */}
      <div
        className="hidden sm:block sticky top-3 self-start z-10 min-w-[296px] w-[296px] flex-shrink-0 h-fit shadow-md rounded-xl overflow-y-auto bg-white transition-max-height duration-300"
        style={{ maxHeight: "calc(-108px + 100vh)" }}
      >
        <div className="flex flex-col py-4 px-3 gap-4">
          <div className="flex flex-col gap-4">
            <div className="flex flex-col">
              <p className="text-base font-bold text-gray-900 leading-6">
                {candidateData?.fullName || authUser?.fullName || "·ª®ng vi√™n"}
              </p>
              {/* <p className="text-sm text-gray-500 line-clamp-2"></p> */}
            </div>
            <div className="flex flex-col p-3 rounded-xl gap-3 border border-gray-200 shadow-md">
              <div className="flex items-center gap-1.5 py-1 cursor-pointer">
                <span className="flex-1 text-sm text-gray-500">
                  Cho ph√©p NTD t√¨m b·∫°n
                </span>
                <div className="min-w-[40px]">
                  <div className="relative w-[38px] h-[23px] bg-gray-400 rounded-full cursor-pointer">
                    <div className="absolute top-1/2 -translate-y-1/2 left-[2px] w-[19px] h-[19px] bg-white rounded-full shadow-md transition-all" />
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="flex flex-col gap-1">
            {menuItems.map((item, idx) => (
              <div
                key={idx}
                className="flex items-center w-full cursor-pointer"
              >
                <div
                  className={`flex items-center p-2 gap-2 w-full rounded-lg hover:bg-gray-100 ${
                    item.active ? "bg-purple-100" : ""
                  }`}
                >
                  <span
                    className={`text-base ${
                      item.active ? "text-purple-600" : "text-gray-500"
                    }`}
                  >
                    {item.icon}
                  </span>
                  <span
                    className="flex-1 text-sm text-gray-700 truncate"
                    title={item.label}
                  >
                    {item.label}
                  </span>
                  {item.hasSubMenu && (
                    <span className="text-gray-400 text-sm">‚Ä∫</span>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="w-full max-w-[calc(100%-296px-24px)] max-lg:max-w-full">
        {" "}
        {/* Adjusted max-width */}
        <div className="w-full">
          {" "}
          {/* Removed lg:min-h-screen */}
          <div className="flex flex-col gap-4">
            {/* Profile Info Section */}
            <form
              onSubmit={handleUpdateProfile}
              className="bg-white border border-gray-200 rounded-xl p-6 shadow-md flex flex-col md:flex-row items-start gap-10 relative"
            >
              {/* Left Column (Avatar, Name, Status) */}
              <div className="flex flex-col items-center md:items-start gap-3 min-w-[40%] md:min-w-[200px]">
                {" "}
                {/* Adjusted width */}
                <div className="relative w-[80px] h-[80px]">
                  <img
                    src={candidateData?.avatarUrl || "/img/avatar.jpg"} // TODO: Th√™m avatarUrl v√†o schema n·∫øu c·∫ßn
                    alt="avatar"
                    className="rounded-full w-full h-full object-cover"
                  />
                  {/* TODO: N√∫t upload avatar */}
                  <div className="absolute bottom-0 right-0 w-6 h-6 bg-white rounded-full flex items-center justify-center border border-gray-300 cursor-pointer">
                    <i className="bi bi-camera text-gray-500 text-sm"></i>
                  </div>
                </div>
                {/* Tr·∫°ng th√°i t√¨m vi·ªác */}
                <div className="bg-purple-100 text-purple-600 text-sm font-medium rounded-full px-3 py-1 flex items-center gap-1 cursor-pointer">
                  <i className="bi bi-lightning-charge-fill text-base"></i>
                  Tr·∫°ng th√°i t√¨m vi·ªác?
                  <i className="bi bi-chevron-down text-xs ml-1"></i>
                </div>
                {/* T√™n */}
                {isEditing ? (
                  <input
                    type="text"
                    name="fullName"
                    value={formData.fullName}
                    onChange={handleInputChange}
                    placeholder="H·ªç v√† t√™n"
                    className="text-base font-semibold text-gray-900 border-b border-gray-300 focus:border-purple-500 outline-none w-full"
                    required
                  />
                ) : (
                  <h3 className="text-base font-semibold text-gray-900">
                    {candidateData?.fullName || "Ch∆∞a c·∫≠p nh·∫≠t"}
                  </h3>
                )}
                {/* ƒê·ªãa ch·ªâ */}
                {isEditing ? (
                  <input
                    type="text"
                    name="address"
                    value={formData.address}
                    onChange={handleInputChange}
                    placeholder="ƒê·ªãa ch·ªâ hi·ªán t·∫°i"
                    className="text-sm text-gray-700 border-b border-gray-300 focus:border-purple-500 outline-none w-full"
                  />
                ) : (
                  <p
                    className="text-sm text-blue-600 cursor-pointer"
                    onClick={handleEditClick}
                  >
                    {candidateData?.address || "Th√™m ƒë·ªãa ch·ªâ hi·ªán t·∫°i"}
                  </p>
                )}
              </div>

              {/* Right Column (Contact Info) */}
              <div className="flex-1 flex flex-col gap-3 w-full">
                {" "}
                {/* Increased gap */}
                {/* Email (Kh√¥ng cho s·ª≠a) */}
                <div className="flex items-center gap-2 text-sm text-gray-600">
                  <i className="bi bi-envelope text-gray-500"></i>
                  <span>{candidateData?.email || "Kh√¥ng c√≥ email"}</span>
                  <i className="bi bi-patch-check-fill text-green-500"></i>
                </div>
                {/* S·ªë ƒëi·ªán tho·∫°i */}
                {isEditing ? (
                  <div className="flex items-center gap-2 text-sm">
                    <i className="bi bi-phone text-gray-500"></i>
                    <input
                      type="tel"
                      name="phone"
                      value={formData.phone}
                      onChange={handleInputChange}
                      placeholder="S·ªë ƒëi·ªán tho·∫°i"
                      className="border-b border-gray-300 focus:border-purple-500 outline-none flex-1"
                    />
                  </div>
                ) : (
                  <div
                    className="flex items-center gap-2 text-sm text-gray-600 cursor-pointer"
                    onClick={handleEditClick}
                  >
                    <i className="bi bi-phone text-gray-500"></i>
                    <span>
                      {candidateData?.phone || (
                        <span className="text-purple-600">
                          Th√™m s·ªë ƒëi·ªán tho·∫°i
                        </span>
                      )}
                    </span>
                  </div>
                )}
                {/* Gi·ªõi t√≠nh */}
                {isEditing ? (
                  <div className="flex items-center gap-2 text-sm">
                    <i className="bi bi-person text-gray-500"></i>
                    <select
                      name="gender"
                      value={formData.gender}
                      onChange={handleInputChange}
                      className="border-b border-gray-300 focus:border-purple-500 outline-none flex-1 bg-white"
                    >
                      <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                      <option value="Male">Nam</option>
                      <option value="Female">N·ªØ</option>
                      <option value="Other">Kh√°c</option>
                    </select>
                  </div>
                ) : (
                  <div
                    className="flex items-center gap-2 text-sm text-gray-600 cursor-pointer"
                    onClick={handleEditClick}
                  >
                    <i className="bi bi-person text-gray-500"></i>
                    <span>
                      {candidateData?.gender || (
                        <span className="text-purple-600">Th√™m gi·ªõi t√≠nh</span>
                      )}
                    </span>
                  </div>
                )}
                {/* Ng√†y sinh */}
                {isEditing ? (
                  <div className="flex items-center gap-2 text-sm">
                    <i className="bi bi-calendar-event text-gray-500"></i>
                    <input
                      type="date"
                      name="dateOfBirth"
                      value={formData.dateOfBirth}
                      onChange={handleInputChange}
                      className="border-b border-gray-300 focus:border-purple-500 outline-none flex-1"
                    />
                  </div>
                ) : (
                  <div
                    className="flex items-center gap-2 text-sm text-gray-600 cursor-pointer"
                    onClick={handleEditClick}
                  >
                    <i className="bi bi-calendar-event text-gray-500"></i>
                    <span>
                      {candidateData?.dateOfBirth ? (
                        new Date(candidateData.dateOfBirth).toLocaleDateString(
                          "vi-VN"
                        )
                      ) : (
                        <span className="text-purple-600">Th√™m ng√†y sinh</span>
                      )}
                    </span>
                  </div>
                )}
                {/* T√¨nh tr·∫°ng h√¥n nh√¢n (V√≠ d·ª• - th√™m n·∫øu c√≥ trong schema) */}
                {/*
                 {isEditing ? (...) : (
                    <div className="flex items-center gap-2 text-sm text-gray-600 cursor-pointer" onClick={handleEditClick}>
                      <i className="bi bi-heart text-gray-500"></i>
                      <span>{candidateData?.maritalStatus || <span className="text-purple-600">Th√™m t√¨nh tr·∫°ng h√¥n nh√¢n</span>}</span>
                    </div>
                 )}
                 */}
                {/* N√∫t L∆∞u/H·ªßy khi ƒëang ch·ªânh s·ª≠a */}
                {isEditing && (
                  <div className="mt-4 flex gap-3">
                    <button
                      type="submit"
                      disabled={isUpdating}
                      className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-1.5 rounded-md text-sm font-medium disabled:opacity-70 disabled:cursor-wait"
                    >
                      {isUpdating ? "ƒêang l∆∞u..." : "L∆∞u thay ƒë·ªïi"}
                    </button>
                    <button
                      type="button"
                      onClick={handleCancelEdit}
                      disabled={isUpdating}
                      className="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-1.5 rounded-md text-sm font-medium"
                    >
                      H·ªßy
                    </button>
                  </div>
                )}
                {/* Hi·ªÉn th·ªã l·ªói c·∫≠p nh·∫≠t */}
                {updateError && (
                  <p className="text-sm text-red-600 mt-2">{updateError}</p>
                )}
              </div>

              {/* N√∫t Edit (ch·ªâ hi·ªÉn th·ªã khi kh√¥ng edit) */}
              {!isEditing && (
                <button
                  type="button"
                  onClick={handleEditClick}
                  className="absolute top-3 right-3 w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-100 transition"
                  title="Ch·ªânh s·ª≠a th√¥ng tin"
                >
                  <i className="bi bi-pencil-square text-gray-500 text-lg"></i>
                </button>
              )}
            </form>

            {/* Ph·∫ßn Tr·∫°ng th√°i t√¨m vi·ªác (gi·ªØ nguy√™n ho·∫∑c l√†m ƒë·ªông t∆∞∆°ng t·ª±) */}
            <div className="bg-purple-50 px-4 py-2 rounded-full w-max cursor-pointer flex items-center gap-2">
              <i className="bi bi-lightning-charge-fill text-purple-500 text-sm"></i>
              <span className="text-sm text-gray-600">
                Tr·∫°ng th√°i t√¨m vi·ªác c·ªßa b·∫°n?
              </span>
              <i className="bi bi-chevron-down text-gray-500 text-sm"></i>
            </div>

            {/* Ph·∫ßn CV (C√≥ th·ªÉ t√°ch th√†nh component ri√™ng) */}
            {/* TODO: Th√™m logic upload/update CV ·ªü ƒë√¢y */}
            <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-md">
              <h2 className="text-lg font-medium text-gray-900 mb-3">
                CV c·ªßa t√¥i
              </h2>
              {candidateData?.cvUrl ? (
                <div className="flex items-center justify-between p-3 border border-gray-200 rounded-md">
                  <div className="flex items-center gap-2">
                    <i className="bi bi-file-earmark-pdf-fill text-red-500 text-xl"></i>
                    <a
                      href={`http://localhost:8000${candidateData.cvUrl}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-sm text-blue-600 hover:underline truncate"
                    >
                      {candidateData.cvUrl.split("/").pop()}{" "}
                    </a>
                  </div>
                  {/* TODO: N√∫t c·∫≠p nh·∫≠t/x√≥a CV */}
                  <button className="text-sm text-purple-600 hover:underline">
                    Thay ƒë·ªïi
                  </button>
                </div>
              ) : (
                <div className="border-2 border-dashed border-gray-300 p-4 rounded-md text-center relative">
                  <input
                    type="file"
                    accept=".pdf"
                    className="absolute w-full h-full top-0 left-0 opacity-0 cursor-pointer" /* onChange={handleCvUpload} */
                  />
                  <button className="bg-purple-100 text-purple-600 px-6 py-1.5 rounded-md flex items-center gap-2 border border-purple-200 mx-auto">
                    <i className="bi bi-upload text-purple-600"></i>
                    <span>T·∫£i l√™n CV</span>
                  </button>
                  <p className="text-xs text-gray-500 mt-2">
                    H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: pdf, t·ªëi ƒëa 5MB
                  </p>
                </div>
              )}
            </div>

            {/* Ph·∫ßn Ti√™u ch√≠ t√¨m vi·ªác (gi·ªØ nguy√™n ho·∫∑c l√†m ƒë·ªông t∆∞∆°ng t·ª±) */}
            <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-md">
              <div className="flex justify-between items-center mb-2">
                <h2 className="text-base font-medium text-gray-900">
                  Ti√™u ch√≠ t√¨m vi·ªác
                </h2>
                <button className="w-10 h-10 flex items-center justify-center rounded-full hover:bg-purple-50 transition">
                  <i className="bi bi-pencil-square text-gray-500 text-lg"></i>
                </button>
              </div>
              <div className="border-t border-gray-100 my-2"></div>
              <div className="space-y-3">
                <div>
                  <p className="text-xs text-gray-500">V·ªã tr√≠ c√¥ng vi·ªác</p>
                  <p className="text-sm text-purple-600 cursor-pointer">
                    Th√™m v·ªã tr√≠ c√¥ng vi·ªác
                  </p>
                </div>
                {/* Th√™m c√°c ti√™u ch√≠ kh√°c */}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfilePage;
